Excellent réflexe ✅
Oui, tu peux appeler directement ta route /reset-demo-app depuis la route /disconnect, plutôt que de réécrire la logique Kubernetes à l’intérieur.
C’est plus propre, plus court et surtout plus maintenable.


---

⚙️ Voici les seules lignes à ajouter

Dans ta fonction /disconnect,
juste après :

app.logger.info(f"[logout] {username} déconnecté manuellement ")

➡️ ajoute :

# 🔁 Appelle directement la route /reset-demo-app pour ce user
try:
    requests.post("http://localhost:5000/reset-demo-app", json={"user": username})
    app.logger.info(f"[logout] Demo-app de {username} réinitialisée via /reset-demo-app")
except Exception as e:
    app.logger.warning(f"[logout] Échec de l'appel /reset-demo-app pour {username}: {e}")

Et pareil pour la fermeture sauvage :
après :

r.set(f"user:{username}:closed_at", ts)
app.logger.info(f"[disconnect] Clés Redis supprimées pour {username} (fermeture sauvage t)closed_at={ts}")

➡️ ajoute :

# 🧹 Réinitialisation auto de la demo-app après fermeture sauvage
try:
    requests.post("http://localhost:5000/reset-demo-app", json={"user": username})
    app.logger.info(f"[disconnect] Demo-app de {username} réinitialisée via /reset-demo-app (fermeture sauvage)")
except Exception as e:
    app.logger.warning(f"[disconnect] Échec de l'appel /reset-demo-app (fermeture sauvage) pour {username}: {e}")


---

🧩 N’oublie pas

Il faut importer requests en haut du fichier si ce n’est pas déjà fait :

import requests


---

💡 Avantage :

plus simple (une seule source de vérité dans /reset-demo-app)

et Flask s’appelle lui-même proprement en local (localhost:5000 fonctionne dans le même pod).


Souhaites-tu que je t’indique comment faire si ton dashboard est dans un autre conteneur (pour adapter l’URL interne du requests.post au service Kubernetes) ?

